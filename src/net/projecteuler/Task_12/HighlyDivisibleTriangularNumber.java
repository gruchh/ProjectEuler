/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * <p>
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 */

package net.projecteuler.Task_12;

public class HighlyDivisibleTriangularNumber {

    public static void main(String[] args) {

        double currentlyParsedNumberOfSequence = 0;
        double differenceBetweenAdjacentNumbers = 0;
        int actualDividersNumber = 0;


        for (int i = 1; actualDividersNumber < 500; i++) {
            differenceBetweenAdjacentNumbers++;
            currentlyParsedNumberOfSequence += differenceBetweenAdjacentNumbers;
            actualDividersNumber = getActualDividersNumber(currentlyParsedNumberOfSequence);
        }

        System.out.println("Liczba: " + Math.round(currentlyParsedNumberOfSequence) + " posiada " + actualDividersNumber + " dzielnikow");
    }

    private static int getActualDividersNumber(double currentlyParsedNumberOfSequence) {

        int actualDividersNumber = 0;

        for (double j = 1; j <= Math.sqrt(currentlyParsedNumberOfSequence); j++) {

            if (currentlyParsedNumberOfSequence % j == 0) {

                if (j < Math.sqrt(currentlyParsedNumberOfSequence)) {
                    actualDividersNumber += 2;
                }

                if (j == Math.sqrt(currentlyParsedNumberOfSequence)) {
                    actualDividersNumber++;
                }
            }
        }
        return actualDividersNumber;
    }
}
